language: c

cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
    - $HOME/.hlint
    - $HOME/.ghc-install
before_cache:
  - rm -fv $CABALHOME/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $CABALHOME/packages/hackage.haskell.org/00-index.*
  - rm -fv $CABALHOME/packages/hackage.haskell.org/*.json
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.cache
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar.idx

jobs:
  include:
    - env: CABALVER=3.0 GHCVER=8.8.3
      addons: {apt: {sources: [hvr-ghc], packages: [cabal-install-3.0,ghc-8.8.3,happy-1.19.5,alex-3.1.7]}}
    - env: CABALVER=3.2 GHCVER=8.10.1
      addons: {apt: {sources: [hvr-ghc], packages: [cabal-install-3.2,ghc-8.10.1,happy-1.19.5,alex-3.1.7]}}

  allow_failures:
    - env: CABALVER=head GHCVER=head

before_install:
  - export CABALHOME=$HOME/.cabal
  - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
  - export PATH=/opt/alex/3.1.7/bin:/opt/happy/1.19.5/bin:$PATH

install:
 - rm -f cabal.project cabal.project.local cabal.project.freeze
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal v2-update

# Here starts the actual work to be performed for the package under test; any command which exits with a non-zero exit code causes the build to fail.
script:
 - cabal v2-configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cabal v2-build -j4  # this builds all libraries and executables (including tests/benchmarks)
 - export feldspar_language_libdir="$PWD/src/clib"
 - cabal v2-test
 - cabal check
 - cabal v2-sdist   # tests that a source-distribution can be generated

# Check that the resulting source distribution can be built & installed.
# If there are no other `.tar.gz` files in `dist`, this can be even simpler:
# `cabal install --force-reinstalls dist/*-*.tar.gz`
# - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
#   (cd dist && cabal sandbox init --sandbox=../.cabal-sandbox && cabal install -j --force-reinstalls "$SRC_TGZ")
